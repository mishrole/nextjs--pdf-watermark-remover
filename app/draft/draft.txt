
    // const pdfData = new Uint32Array(pdfArrayBuffer);

    // // Load PDF
    // const pdf = await pdfjsLib.getDocument(pdfData).promise;

    // const allPdfImages = await getAllPdfImagesFileNameAndPage(pdf);

    // const image = allPdfImages.find((image: any) => {
    //   return image.fileName === fileName;
    // });

    // if (!image) {
    //   throw new Error(`Image ${fileName} not found`);
    // }

    // const { page } = image;

    // const pdfImageData: any = await page.objs.get(fileName);

    // if (pdfImageData) {
    //   if (pdfImageData instanceof pdfjsLib.OPS.paintImageXObject) {
    //     // Eliminar el objeto XObject de la página
    //     page.objs.removeXObject(pdfImageData);
    //   } else {
    //     page.objs.removeObject(pdfImageData);
    //   }

    //   const pdfBytes = await pdf.save();

    //   return pdfBytes.buffer;
    // }

    // if (pdfImageData) {
    //   pdf.removeXObjects([pdfImageData]);
    // }

    // await pdfImageData.remove();

    // if (page.objs.has(fileName)) {
    // Eliminar el objeto XObject de la página
    // page.objs.removeXObject(fileName);

    // Guardar los cambios en el PDF (opcional)
    // const pdfBytes = await pdf.save();

    // console.log("Funciona");
    // return pdfBytes.buffer;

    // pdfBytes ahora contiene el PDF actualizado sin el objeto XObject
    // }

    // const modifiedPdfData = await pdf.save();
    //
    // return modifiedPdfData;

    // pdf.context.delete(pdfImageData);

    // const emptyXObject = createEmptyXObject(pdf);
    // pdf.context.assign(pdfImageData, emptyXObject);

    // if (page?.resources?.names.has("XObject")) {
    //   const xObjectDict = page.resources.names.get("XObject");

    //   // Verifica si el XObject que deseas eliminar existe
    //   if (xObjectDict.has(fileName)) {
    //     xObjectDict.delete(fileName); // Elimina el XObject
    //   }
    // }
    // return Buffer.from(pdfData.buffer);